=instructions=
  * put new work and bugs into "TODO"
    * please prioritize the new work (more important work should be at the start of the list)
  * if you work on something put it under "in progress"
  * after finishing the work out it in "done"
  * before creating new classes take a look into the architecture document, bigger or tricky constructs should be documented in that document
  * check the design document before you implement so we implement our collective vision, if something is not clear please write a email 


= in Progress =

  * Class Ingredients -> John

= TODO =
== WORK FOR ALPHA VERSION ==
  * Level editor: support for FileName: level(worldnr)_(levelnr)_(flag) naming convention ->Pascal
    * available spells in layer->Pascal
    * enemy in editor: put graphic in editor on enemy layer  ->Pascal
  * First Level -> Marian
  * all spells implemented like described in the design document (graphics not important, only mechanics)
    * aiming mechanics -> christopher
    * correcting fire/freeze/noGravity/createMatter (add aiming etc)
    * push / pull

  === OPTIONAL (if enough time is left) ===
  * elements that are influenced by push/pull
  * turn music/sound on/off via the OPTIONS Menu
  * BUG: spell HUD do not change after level reload if you switch the spells ->Pascal
  * new graphic for electric spell
  * BUG: enemies still move while pausing the game


== WORK FOR BETA VERSION ==
  * Sound menu (turn sound and/or music on/off)
  * menu exit -> exit game should be last entry
  * level: mechanics for switches in levels (see level ideas in design document)
  * savegames --> amauri
  * save configuration (save settings like sound/resolutions)--> amauri
  * enemy / AI --> john
    * shadow creature -> follows player if he is near him
    * bats: flying through level (sinus curve)
    * spider: only moves in defined web area (in all directions)

==work until next milestone ==
  * reimplementation of last prototype state, 
    * write down which class you are working on
      * if you build a component, create the class and submit before writing code in it
    * for decoupled components you can provide a minimal implementation or copy paste from the last prototype first (can be replaced later by better component implementation)
   * encapsulate important constants from all classes in some static classes as static changeable values (no const)
   * clean code wherever necessary 
  * let camera follow the player (needs fine tuning)
  * maybe let us think about a resolution independent implementation
    ( I recently tried this with our old prototype http://www.david-amador.com/2010/03/xna-2d-independent-resolution-rendering/ ) But I had problems with the cameraposition ..
  * online edit possebility for constants (Marian already working?)

==work for next milestone==

 * Menu Entry for Options should be in the middle and the Quit Option at the bottom.
 * Put Debug Controls also into a nencapsulated interface
 * Enemy different behavior and general ki (old one was disabled, because is buggy)
 * fix bounds of player and enemy

== deferred work ==

== rejected To Dos ==

 * Implement different level bound behavior: Top, left, right are like bumping into an object while the bottom kills the player. -> This will be solved by placing impassable items at the left and right bounds so the player can't touch the. Also no platform will be put so high that the player can reach the top.

= done =


Menu screens: creating the menus --> Amauri
 * Stop playing the background music when exiting the GamePlayScreen.->Amaraui
   * changed Spell stuff (creation,constant management, etc)
   * new controls -> Marian
   * encapsulate controls, see or copy implementation from new started architecture to old one
   * implement new control style?
 
Christopher:

  * ElectricitySpell -> Marian
  * moved spell constants
  * reimplement matter
  * fix bug with platforms
  * Implementation Player and removing tile stuff
  * bounds fix
  * collision resolution 
  * create matter: player is directly throwing block after casting
  * Check the collision resolution class and bounds of pplatforms and enemies. -> Flickering enemey bug + Teleporting player.
  * Better fitting animation for new matter spell 
Pascal:
 * Enable multi-lined sprite sheets. (Highly optional: Enable spritesheets with more than one animation.)
 * draw zero layer